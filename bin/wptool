#! /usr/bin/perl

use strict;
use WpTool::Utilities;
use Data::Dumper;
use Getopt::Long;
use Term::ANSIColor;

my $opts = {};
GetOptions(
	'check'     => \$opts->{'check'},
	'diff:s'    => \$opts->{'diff'},
	'fix:s'     => \$opts->{'fix'},
	'help|h|?'  => \$opts->{'help'},
	'mysql'     => \$opts->{'mysql'},
	'perms'     => \$opts->{'fixperms'},
	'user=s'    => \$opts->{'unixuser'},
	'version:s' => \$opts->{'version'},
	'V'         => \$opts->{'ourversion'},
) or do{ print "Error parsing arguments\n"; usage(255);};



if($opts->{'ourversion'}){
	version();
	exit 0;
}

if($opts->{'help'}){
	usage(0);
}

my $dir = shift;
if(!$dir){
	usage(255);
}

my $versions = documentRoot($dir);
if(defined($opts->{'version'}) && $opts->{'version'} eq ""){
	print $versions->{'wp_version'}, "\n";	
	exit 0;
}

if($opts->{'fixperms'}){
	unless($opts->{'unixuser'}){
		$opts->{'unixuser'} = guessUnixUser();
		print color 'red';
		print "Guessed user as $opts->{'unixuser'}\n";
		print color 'reset';
	}
	print "\nCommands to run:\n ";
	my @commands = getFixPermsCommands($opts->{'unixuser'});
	print join("\n ", @commands), "\n";
	print "Hit ctrl-C to abort, anything else to run them";
	if(<STDIN>){
		print "Carrying on!\n";
	}
	foreach my $cmd (@commands){
		print "> $cmd ... ";
		my $output = `$cmd 2>&1`;
		if($? > 0){
			chomp($output);
			print color 'red';
			print "FAILED\n $output\n";
			print color 'reset';
		}else{
			print color 'green';
			print "done\n";
			print color 'reset';
		}
	}
}

if($opts->{'mysql'}){
	exec(sqlShellCmd());
}

if(defined($opts->{'diff'})){
	my @files;
	if($opts->{'diff'} eq ""){
		my ($changes, undef) = checkFiles($dir);
		@files = keys(%$changes);
	}else{
		push(@files, $opts->{'diff'});
	}
	print "# ";
	print color "red";
	print "< = Lines removed\n";
	print color "reset";
	print "# ";
	print color "green";
	print "> = Lines added\n";
	print color "reset";
	foreach my $file (@files){
		print color "bold blue";
		print "$file:\n";
		print color "reset";
		my @lines = diffFile($file);
	  foreach my $line (@lines){
			if($line =~ m/^</){
				print color "red";
				print $line;
				print color "reset";
			}elsif($line =~ m/^>/){
				print color "green";
				print $line;
				print color "reset";
			}else{
				print $line;
			}
		}
	}
	exit(0);
}

if(defined($opts->{'fix'})){
	if($opts->{'fix'} eq ""){
		my ($changes,$absences) = checkFiles($dir);
		foreach my $file (keys(%$changes)){
			print "Changed: $file";
			my $goodSum = $changes->{$file}->[0];
			print " replaced\n" if cleanFile($file, $goodSum)
		}
		foreach my $file(keys(%$absences)){
			print "Missing: $file";
			my $goodSum = $changes->{$file}->[0];
			print " replaced\n" if cleanFile($file, $goodSum)
		}
	}else{
		my $sums = getMd5Sums();
		my $sum = $sums->{$opts->{'fix'}};
		cleanFile($opts->{'fix'}, $sum);
	}
}


if($opts->{'check'}){
	my($changes,$absences) = checkFiles($dir);
		unless(defined($changes) || defined($absences)){
		print "Looks good\n";
		exit;
	}
	foreach my $file (keys(%$changes)){
		print "changed: $file\n";
	}
	foreach my $file(keys(%$absences)){
		print "missing: $file\n";
	}
}
exit;


sub usage {
my $exit = shift;
print <<"EOF";
  wptool [dir] [options]

  Options:
    --check        Check MD5Sums
    --diff [path]  Show a diff of all changed files or, optionally, of the 
                   file at [path] relative to the dir.
    --fix          Check MD5Sums and replace changed files with new ones
    --help         See this help
    --mysql        Start a MySQL shell using credentials in wp-config.php
    --perms        Guess at sensible fs ownership and permissions; prompt 
                   to set them
    --user [name]  Override the unix user guessed by --perms
    --version      Print Wordpress version
    -V             Print the version of wptool
EOF

exit $exit;
}
